# NOTE: This docker-compose.yml is meant to be just an example of how
# you could accomplish this on your own. It is not intended to work in
# all use-cases and must be adapted to fit your needs. This is merely
# a guideline.

# See docs.getsentry.com/on-premise/server/ for full
# instructions

version: '2'

volumes:
  sentry-data:
  postgres-data:
  # This is used to store SSL certs
  nginx-data:

services:
  base:
    build: .
    environment:
      # Run `docker-compose run web config generate-secret-key`
      # to get the SENTRY_SECRET_KEY value.
      # I've put it in .env to keep secrets out of here
      SENTRY_SECRET_KEY:
      GITHUB_APP_ID:
      GITHUB_API_SECRET:
      SENTRY_MEMCACHED_HOST: memcached
      SENTRY_REDIS_HOST: redis
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_EMAIL_HOST:
      SENTRY_SMTP_HOSTNAME:
    volumes:
      - sentry-data:/var/lib/sentry/files

  memcached:
    image: memcached:1.4

  redis:
    image: redis:3.2-alpine

  postgres:
    image: postgres:9.5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  web:
    extends: base
    links:
      - redis
      - postgres
      - memcached
    expose:
      - '9000'

  cron:
    extends: base
    command: run cron
    links:
      - redis
      - postgres
      - memcached

  worker:
    extends: base
    command: run worker
    links:
      - redis
      - postgres
      - memcached

  nginx:
    build: nginx
    ports:
     - "80:80"
     - "443:443"
    links:
     - web
    volumes:
     # We mount this slightly off standard so that we can just have one mount
     - nginx-data:/etc/ssl/nginx
    environment:
     NGINX_HOST:
    command: /bin/bash -c "envsubst '\$${NGINX_HOST}' < /etc/nginx/conf.d/nginx.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
